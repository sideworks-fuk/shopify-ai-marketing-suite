name: Frontend Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '„Éá„Éó„É≠„Ç§Áí∞Â¢É„ÇíÈÅ∏Êäû'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
      deploy_message:
        description: '„Éá„Éó„É≠„Ç§„É°„ÉÉ„Çª„Éº„Ç∏Ôºà‰ªªÊÑèÔºâ'
        required: false
        type: string

env:
  NODE_VERSION: '20.x'
  APP_LOCATION: '/frontend'
  OUTPUT_LOCATION: '.next'
  AZURE_STATIC_WEB_APPS_API_TOKEN_SECRET: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BRAVE_SEA_038F17A00 }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üìù Display deployment info
      run: |
        echo "üöÄ Manual Frontend Deployment Started"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Deploy message: ${{ github.event.inputs.deploy_message }}"
        echo "Timestamp: $(date)"

    - name: üöÄ Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN_SECRET }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: ${{ env.APP_LOCATION }}
        output_location: ${{ env.OUTPUT_LOCATION }}
        app_build_command: 'npm run build'
      env:
        NEXT_PUBLIC_ENVIRONMENT: ${{ github.event.inputs.environment }}
        NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SHOPIFY_API_KEY: ${{ vars.NEXT_PUBLIC_SHOPIFY_API_KEY }}
        NODE_VERSION: 20

    - name: ‚úÖ Deployment complete
      run: |
        echo "‚úÖ Frontend deployment completed successfully!"
        echo "üåê App URL: https://brave-sea-038f17a00.1.azurestaticapps.net"
        echo "üìä Check Azure Portal for detailed logs"

    - name: üè• Health check
      run: |
        echo "Waiting 30 seconds for deployment to stabilize..."
        sleep 30
        echo "Performing health check..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://brave-sea-038f17a00.1.azurestaticapps.net)
        if [ "$response" = "200" ]; then
          echo "‚úÖ Health check passed!"
        else
          echo "‚ö†Ô∏è Health check returned status: $response"
        fi