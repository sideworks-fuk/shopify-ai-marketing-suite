// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopifyTestApi.Data;

#nullable disable

namespace ShopifyTestApi.Migrations
{
    [DbContext(typeof(ShopifyDbContext))]
    [Migration("20250721101011_AddShopifyCustomerId")]
    partial class AddShopifyCustomerId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShopifyTestApi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptsEmailMarketing")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptsSMSMarketing")
                        .HasColumnType("bit");

                    b.Property<string>("AddressPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyStoreName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerSegment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrdersCount")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ShopifyCustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("bit");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptsEmailMarketing = false,
                            AcceptsSMSMarketing = false,
                            CreatedAt = new DateTime(2025, 6, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6055),
                            CustomerSegment = "リピーター",
                            Email = "yamada@example.com",
                            FirstName = "太郎",
                            LastName = "山田",
                            OrdersCount = 3,
                            Phone = "090-1234-5678",
                            TaxExempt = false,
                            TotalOrders = 3,
                            TotalSpent = 25000m,
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6079)
                        },
                        new
                        {
                            Id = 2,
                            AcceptsEmailMarketing = false,
                            AcceptsSMSMarketing = false,
                            CreatedAt = new DateTime(2025, 7, 14, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6137),
                            CustomerSegment = "新規顧客",
                            Email = "sato@example.com",
                            FirstName = "花子",
                            LastName = "佐藤",
                            OrdersCount = 1,
                            Phone = "080-9876-5432",
                            TaxExempt = false,
                            TotalOrders = 1,
                            TotalSpent = 8500m,
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6138)
                        },
                        new
                        {
                            Id = 3,
                            AcceptsEmailMarketing = false,
                            AcceptsSMSMarketing = false,
                            CreatedAt = new DateTime(2025, 1, 22, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6140),
                            CustomerSegment = "VIP顧客",
                            Email = "suzuki@example.com",
                            FirstName = "一郎",
                            LastName = "鈴木",
                            OrdersCount = 15,
                            TaxExempt = false,
                            TotalOrders = 15,
                            TotalSpent = 125000m,
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6141)
                        });
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SubtotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 7, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6394),
                            Currency = "JPY",
                            CustomerId = 1,
                            OrderNumber = "ORD-001",
                            Status = "completed",
                            SubtotalPrice = 6300m,
                            TaxPrice = 700m,
                            TotalPrice = 7000m,
                            UpdatedAt = new DateTime(2025, 7, 7, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6395)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 14, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6397),
                            Currency = "JPY",
                            CustomerId = 2,
                            OrderNumber = "ORD-002",
                            Status = "completed",
                            SubtotalPrice = 7700m,
                            TaxPrice = 800m,
                            TotalPrice = 8500m,
                            UpdatedAt = new DateTime(2025, 7, 14, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6398)
                        });
                });

            modelBuilder.Entity("ShopifyTestApi.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Price = 3500m,
                            ProductId = 1,
                            Quantity = 2,
                            TotalPrice = 7000m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            Price = 2800m,
                            ProductId = 2,
                            Quantity = 1,
                            TotalPrice = 2800m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            Price = 4200m,
                            ProductId = 3,
                            Quantity = 1,
                            TotalPrice = 4200m
                        });
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vendor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "衣類",
                            CreatedAt = new DateTime(2025, 5, 22, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6375),
                            Currency = "JPY",
                            Description = "環境に優しいオーガニックコットン100%のTシャツ",
                            InventoryQuantity = 50,
                            Price = 3500m,
                            Title = "オーガニックコットンTシャツ",
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6376)
                        },
                        new
                        {
                            Id = 2,
                            Category = "雑貨",
                            CreatedAt = new DateTime(2025, 6, 6, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6378),
                            Currency = "JPY",
                            Description = "保温・保冷効果抜群のステンレス製タンブラー",
                            InventoryQuantity = 25,
                            Price = 2800m,
                            Title = "ステンレス製タンブラー",
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6378)
                        },
                        new
                        {
                            Id = 3,
                            Category = "食品",
                            CreatedAt = new DateTime(2025, 6, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6380),
                            Currency = "JPY",
                            Description = "厳選されたオーガニック緑茶の詰め合わせセット",
                            InventoryQuantity = 15,
                            Price = 4200m,
                            Title = "オーガニック緑茶セット",
                            UpdatedAt = new DateTime(2025, 7, 21, 10, 10, 11, 107, DateTimeKind.Utc).AddTicks(6381)
                        });
                });

            modelBuilder.Entity("ShopifyTestApi.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("CompareAtPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Option1Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option1Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option2Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option3Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Option3Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresShipping")
                        .HasColumnType("bit");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeightUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Order", b =>
                {
                    b.HasOne("ShopifyTestApi.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.OrderItem", b =>
                {
                    b.HasOne("ShopifyTestApi.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopifyTestApi.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShopifyTestApi.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.ProductVariant", b =>
                {
                    b.HasOne("ShopifyTestApi.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ShopifyTestApi.Models.ProductVariant", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
