---
description: プロジェクト全体の基本開発ルール。タスク分析、実装原則、品質管理、Git管理を規定。常時適用。
globs:
  - docs/**
  - frontend/**
  - backend/**
alwaysApply: true
---

# 基本開発ルール

## 前提
このルールを適用する前に、必ず `@.cursor/rules/00-techstack.mdc` を参照すること。

## AIアシスタントの行動原則

### 1. タスク分析（必須）
すべての作業開始前に実施：
- 主要タスクの要約
- 守るべきルールファイルの確認（`.cursor/rules/basic/*.mdc` および `.cursor/rules/*.mdc`）
- 重要な要件と制約の特定
- 潜在的な課題のリストアップ
- 具体的なステップの列挙と実行順序の決定

### 2. 重複実装の防止
実装前に必ず確認：
- 既存の類似機能の有無
- 同名または類似名の関数・コンポーネント
- 重複するAPIエンドポイント
- 共通化可能な処理の特定

### 3. 実装の原則
- 適切なディレクトリ構造の遵守
- 命名規則の一貫性維持
- 共通処理の適切な配置
- TypeScript strict mode遵守
- any型の使用禁止

### 4. 品質管理
- 各ステップ完了後に検証
- エラー発生時は原因特定→対策→検証のサイクル
- 成果物全体の最終確認
- 重複機能がないことの確認

## 制約事項

### 明示的指示の原則
**明示的に指示されていない変更は禁止**

以下の変更には必ず事前承認が必要：
1. 新しいライブラリ・フレームワークの追加
2. データベーススキーマの変更
3. API仕様の変更
4. UI/UXデザイン変更（レイアウト、色、フォント、間隔など）
5. 技術スタックのバージョン変更

必要と思われる変更がある場合は：
- まず提案として報告
- 承認を得てから実施

### エラーハンドリング
問題発生時の対応手順：
1. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
2. 対策案の作成と実施
3. 修正後の動作検証
4. デバッグログの確認と分析

検証結果の記録：
- 検証項目と期待される結果
- 実際の結果と差異
- 必要な対応策（該当する場合）

## Git Commit ルール

### コミット前の必須確認

**ステップ1: 変更ファイルの確認**
```powershell
git status
```

**ステップ2: コミット対象の確認**
- コミット対象が修正内容と関連していることを確認
- 無関係なファイルが含まれていないことを確認

**ステップ3: ステージングの実施**
```powershell
# ❌ 禁止: git add . は使用しない
# ✅ 推奨: 個別にファイルを指定
# Monorepo 例（フロント/バック）
git add frontend/src/components/Header.tsx
git add backend/ShopifyAnalyticsApi/Controllers/WebhookController.cs
```

### コミット前チェックリスト
- [ ] `git status` で変更ファイルを確認した
- [ ] 修正内容と関連するファイルのみがステージングされている
- [ ] 設定ファイル・ログファイルなど意図しないファイルが含まれていない
- [ ] コミットメッセージが変更内容を正確に表現している

### コミットメッセージの原則
- 変更内容を簡潔かつ明確に記述
- 日本語で記述（技術用語は英語可）
- 何を変更したか、なぜ変更したかを明記

**例**:
```
顧客分析画面にフィルタ機能を追加

- 日付範囲フィルタの実装
- ステータスフィルタの実装
- フィルタリセット機能の追加
```

### ブランチ運用
- ブランチ戦略は `develop → staging → main` を厳守
- レビューは Pull Request ベースで実施

## データベースマイグレーション管理

### 重要ルール
マイグレーション実行時は **必ず** 以下を実施：

1. **EF Core Migrationsでスクリプト作成**
```powershell
dotnet ef migrations add DescriptiveName
```

2. **tracking.mdを即座に更新**
ファイルパス: `/docs/04-development/03-データベース/マイグレーション/database-migration-tracking.md`

3. **記録内容**:
   - スクリプト名
   - 作成日時・作成者
   - 変更内容の詳細説明
   - 各環境（Development/Staging/Production）への適用状況
   - 適用日時

### マイグレーションが必要なケース
以下の変更を行う際は必ずマイグレーションを作成：
- 新しいテーブルの追加
- 既存テーブルへのカラム追加・削除・変更
- インデックスの追加・削除
- データ型の変更
- 制約の追加・削除・変更

### 更新フォーマット例
```markdown
### YYYYMMDD_DescriptiveName
- **作成日**: YYYY-MM-DD
- **作成者**: 福田
- **変更内容**: CustomersテーブルにLastPurchaseDateカラム追加
- **適用状況**:
  - Development: ✅ 適用済 (2025-10-18 14:30)
  - Staging: ⏳ 未適用
  - Production: ⏳ 未適用
```

参考: `@docs/04-development/03-データベース/マイグレーション/database-migration-tracking.md`

## 言語・環境設定

### 基本設定
- **すべてのレスポンスは日本語**で記述
- **ターミナルはPowerShell**を使用
- **ドキュメントは日本語優先**（技術用語は英語併記可）

### コマンド例
PowerShell形式でコマンドを提示（複合コマンド/サブシェル/パイプ・リダイレクトは使用しない）：
```powershell
# ✅ Good
npm install
dotnet build

# ❌ Bad (Bash形式)
# npm install && npm run dev
```

## 最終確認

### 作業完了時の確認項目
1. すべてのタスクが完了している
2. 当初の指示内容との整合性が取れている
3. 実装した機能に重複がない
4. 必要なドキュメントが更新されている
5. Git commitが適切に行われている

## 結果報告フォーマット

作業完了時は以下の形式で報告：
```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）
- [発生した問題と対応内容]
- [今後の注意点]

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

## 参考ドキュメント
- 技術スタック: `@.cursor/rules/00-techstack.mdc`
- ワークフロー: `@.cursor/rules/02-workflow.mdc`
- ブランチ戦略: `@CLAUDE.md`
- プロジェクト管理: `@docs/01-project-management/`